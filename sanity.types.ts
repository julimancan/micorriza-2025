/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Homepage = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: {
    title?: string;
    description?: string;
  };
  hero?: {
    title?: string;
    subtitle?: string;
    bgVideo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      alt: string;
      fallback?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "file";
      };
      fallbackImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      _type: "file";
    };
  };
  bio?: {
    title?: string;
    imagenDeFondo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    text?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  photos?: Array<{
    alt: string;
    photo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "photo";
    _key: string;
  }>;
  youtubePlaylist?: {
    titulo?: string;
    youtubePlaylistLink?: string;
  };
  hongo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  siteTitle?: string;
  siteDescription?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socialLinks?: Array<{
    title?: string;
    url?: string;
    icon?: IconPicker;
    _type: "link";
    _key: string;
  }>;
  subscribe?: {
    title?: string;
    subtitle?: string;
    bottomMsg?: string;
    subscribedMessage?: string;
  };
};

export type IconPicker = {
  _type: "iconPicker";
  provider?: string;
  name?: string;
  svg?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Homepage | SiteSettings | IconPicker | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/homepageQueries.ts
// Variable: HOMEPAGE_SEO_QUERY
// Query: *[_type == "homepage"][0].seo
export type HOMEPAGE_SEO_QUERYResult = {
  title?: string;
  description?: string;
} | null;
// Variable: HOMEPAGE_CONTENT_QUERY
// Query: *[_type == "homepage"] [0] {  seo,  "hero": hero {    title,    subtitle,    "bgVideo": bgVideo {      "url": asset->url,      alt,      "fallback": fallback.asset->url,      "fallbackImage": fallbackImage.asset->url    },    "bgVideo1": bgVideo,    "socialLinks": *[_type == "siteSettings"] [0] {      socialLinks,    }.socialLinks,  },  bio,  "youtubePlaylist": youtubePlaylist {    titulo,    youtubePlaylistLink,  },  photos,  hongo}
export type HOMEPAGE_CONTENT_QUERYResult = {
  seo: {
    title?: string;
    description?: string;
  } | null;
  hero: {
    title: string | null;
    subtitle: string | null;
    bgVideo: {
      url: string | null;
      alt: string;
      fallback: string | null;
      fallbackImage: string | null;
    } | null;
    bgVideo1: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
      };
      media?: unknown;
      alt: string;
      fallback?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
        };
        media?: unknown;
        _type: "file";
      };
      fallbackImage?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      _type: "file";
    } | null;
    socialLinks: Array<{
      title?: string;
      url?: string;
      icon?: IconPicker;
      _type: "link";
      _key: string;
    }> | null;
  } | null;
  bio: {
    title?: string;
    imagenDeFondo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    text?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  youtubePlaylist: {
    titulo: string | null;
    youtubePlaylistLink: string | null;
  } | null;
  photos: Array<{
    alt: string;
    photo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    _type: "photo";
    _key: string;
  }> | null;
  hongo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
} | null;

// Source: ./sanity/queries/siteSettingsQueries.ts
// Variable: SOCIAL_ICONS_QUERY
// Query: *[_type == "siteSettings"] [0] {  socialLinks}
export type SOCIAL_ICONS_QUERYResult = {
  socialLinks: Array<{
    title?: string;
    url?: string;
    icon?: IconPicker;
    _type: "link";
    _key: string;
  }> | null;
} | null;
// Variable: SITE_SETTINGS_QUERY
// Query: *[_type == "siteSettings"] [0] {  siteTitle,  siteDescription,  "subscribe": subscribe {    title,    subtitle,    bottomMsg,    subscribedMessage,  },  socialLinks,  "ogImage": *[_type == "homepage"] {"url": hero.bgVideo.fallbackImage.asset->url}}
export type SITE_SETTINGS_QUERYResult = {
  siteTitle: string | null;
  siteDescription: string | null;
  subscribe: {
    title: string | null;
    subtitle: string | null;
    bottomMsg: string | null;
    subscribedMessage: string | null;
  } | null;
  socialLinks: Array<{
    title?: string;
    url?: string;
    icon?: IconPicker;
    _type: "link";
    _key: string;
  }> | null;
  ogImage: Array<{
    url: string | null;
  }>;
} | null;
// Variable: LOGO_QUERY
// Query: *[_type == "siteSettings"] [0] {  logo}
export type LOGO_QUERYResult = {
  logo: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"homepage\"][0].seo    \n": HOMEPAGE_SEO_QUERYResult;
    "\n  *[_type == \"homepage\"] [0] {\n  seo,\n  \"hero\": hero {\n    title,\n    subtitle,\n    \"bgVideo\": bgVideo {\n      \"url\": asset->url,\n      alt,\n      \"fallback\": fallback.asset->url,\n      \"fallbackImage\": fallbackImage.asset->url\n    },\n    \"bgVideo1\": bgVideo,\n    \"socialLinks\": *[_type == \"siteSettings\"] [0] {\n      socialLinks,\n    }.socialLinks,\n  },\n  bio,\n  \"youtubePlaylist\": youtubePlaylist {\n    titulo,\n    youtubePlaylistLink,\n  },\n  photos,\n  hongo\n}\n": HOMEPAGE_CONTENT_QUERYResult;
    "*[_type == \"siteSettings\"] [0] {\n  socialLinks\n}": SOCIAL_ICONS_QUERYResult;
    "*[_type == \"siteSettings\"] [0] {\n  siteTitle,\n  siteDescription,\n  \"subscribe\": subscribe {\n    title,\n    subtitle,\n    bottomMsg,\n    subscribedMessage,\n  },\n  socialLinks,\n  \"ogImage\": *[_type == \"homepage\"] {\"url\": hero.bgVideo.fallbackImage.asset->url}\n}": SITE_SETTINGS_QUERYResult;
    "*[_type == \"siteSettings\"] [0] {\n  logo\n}": LOGO_QUERYResult;
  }
}
